import React, { useState, useEffect } from "react";
import "./styles.css";

import corazon from "./corazon.svg";

import { firestore, loginConGoogle, auth, logout } from "./firebase";

// "usuarios" dentro del useEffect es el nombre de la collection que tengo nombrado en la base de datos del proyecto de prueba de firebase
//      las palabras snapshot y doc son convenciones de variables pero puede ser cualquier nombre

export default function App() {
  const [usuarios, setUsuarios] = useState([]); // todos los usuarios en la base de datos y en este estado

  const [usuario, setUsuario] = useState({
    // formato para controlar el formulario por cada usuario
    // Esto es para manejar los valores del formulario para poder enviarlo a Firebase
    // NOTA Y TIP: de este estilo de formato se guardara en Firebase tal cual con esos nombres de variables lo que se encuentre en el formulario
    autor: "",
    edad: "",
    correo: "",
    tweet: ""
  });

  //######## Para manejar los cambios de las cajas de texto del formulario #####

  const handleChange = (e) => {
    let nuevoUsuarioData = {
      // esta forma seria si tenemos varios inputs y queremos obtener un objeto con todos los valores de los inputs cambiando a medida que vamos escribiendo y asi enviarlos a firebase
      // ...usuario,
      // [e.target.name]: e.target.value

      // esta es la forma que usaremos ahora:
      tweet: e.target.value, // solo este valor de input es escrito por nosotros, el resto de abajo es traido  de la informacion cuando nos logueamos con Google y trae nuestra info personal
      uid: personaLogueada.uid, // este es un identificador unico que se lo consigue desde la autentificacion con google cuando te logueas
      correo: personaLogueada.email,
      autor: personaLogueada.displayName
    };
    setUsuario(nuevoUsuarioData);
  };

  
  //### Estado personaLogueada servirá para gestionar los datos que lleguen del proveedor en este caso google y asignarlo a esta nueva persona logueada

  const [personaLogueada, setPersonaLogueda] = useState(null);

  //#############################################################

  useEffect(() => {
    //la variable << desuscribir >> servira para PARAR la escucha constante del onSnapshot cuando el componente no este montado y asi no tener fuga de memoria (memory leak), eso se lo llamará en el return del useEffect
    // con este codigo traemos los datos que esten almacenados en firebase y luego agregamos esos datos de cada usuario en forma de objeto en el estado usuarios

    const desuscribir = firestore
      .collection("usuarios")
      .onSnapshot((snapshot) => {
        const usuarios = snapshot.docs.map((doc) => {
          return {
            id: doc.id,
            uid: doc.data().uid,
            autor: doc.data().autor,
            tweet: doc.data().tweet,
            correo: doc.data().correo,
            likes: doc.data().likes
          };
        });

        setUsuarios(usuarios);
        //console.log("USUARIOS:");
        //console.log(usuarios);
      });

    // Invocamos el módulo de autentificación de esta forma
    // esto hará que se actualice la informacion si es que se ha logueado una persona o si ha hecho logout

    auth.onAuthStateChanged((user) => {
      setPersonaLogueda(user); // aqui se setea la informacion de esa persona nombre, apellido, foto, y eso viene desde el proveedor en este caso Google
      //conso
      
    // return del useEffect

    return () => {
      desuscribir();
      //console.log("desmontando");
    };
  }, []);

  if (personaLogueada !== null && usuarios.length > 0) {
    console.log("-----------------------------------");
    console.log("PERSONA LOGUEADA:");
    console.log(personaLogueada);
    console.log("------------------------------------");

    console.log("POSTS:");
    console.log(usuarios);
  }

  //#############################################################

  //#### Para Enviar los datos del usuario a firebase ( y luego traer desde firebase
  //     la informacion de ese usuario para agregarlo a la lista de los otros usuarios )  ####

  const eviarUsuario = (e) => {
    e.preventDefault();
    // Enviamos los datos del formulario del usuario a la collection de firestore
    let enviarUser = firestore.collection("usuarios").add(usuario);
    // El envío devuelve una promesa
    let solicitarDocumento = enviarUser.then((docRef) => {
      // y dentro de esta podemos rescatar una referencia al documento (docRef)
      // cuya información final obtendremos con .get()
      return docRef.get();
    });
    // docRef devuelve una promesa
    solicitarDocumento.then((doc) => {
      // y dentro de esta podemos rescatar la informacion del documeto
      let nuevoUsuario = {
        // NOTA : con estos nombres de variable se guardara en el estado "usuarios" agregandolo este nuevo usuario al resto, por eso procura que los nombres de firebase y de los datos que guardes tengan los mismos nombres como consejo.
        id: doc.id,
        autor: doc.data().autor,
        correo: doc.data().correo,
        tweet: doc.data().tweet
      };
      // y agregamos a ese nuevo usuario a la lista de usuarios en el hook que tiene a todos los usuarios
      setUsuarios([...usuarios, nuevoUsuario]);

      //por ultimo limpiamos las entradas de texto del formulario para evitar que se pueda enviar mas de una vez el mismo usuario con los mismos datos
    });
    setUsuario({
      autor: "",
      correo: "",
      tweet: "",
      uid: "" // este identificador uid viene del objeto de personasLogueada que se consigue con la autentificacion con google
    });
  };
  //#############################################################

  const eliminarUsuario = (id) => {
    console.log("hola", id);
    // Eliminamos al usuario que queremos en dos pasos:
    //1. Filtramos la lista total de usuarios, sacando de las lista al id del usuario que coincida con el id de ese mismo usuario que estab dentro de la lista total
    let usuariosFiltrados = usuarios.filter((usuario) => {
      return usuario.id !== id;
    });
    // luego esa lista filtrada la agregamos para reemplazarla con la anterior
    setUsuarios(usuariosFiltrados);

    //2. eliminamos a ese id de usuario que coincida con el id dentro de la colecction "usuarios" de la base de datos de firebase
    // por eso solo usamos "doc" diciendo que es un solo documento con id  que hay que borrar dentro de la collection con el nombre "usuarios"
    firestore.doc(`usuarios/${id}`).delete();
  };
  //#############################################################
  // esta funcion es para aumentar el valor del like de ese tweet con su respectivo id en especifico y ademas actualizar la base de datos de ese tweet con ese like agregado

  const darLike = (id, likes) => {
    console.log("Diste like a este tweet", id);
    // Si el objeto tweet que estamos queriendo
    //actualizar no tenía la propiedad “likes”, vamos a
    //inicializarla en 0.

    if (!likes) {
      // es lo mismo que decir if(likes === undefined) likes=0  }
      likes = 0;
    }

    firestore.doc(`usuarios/${id}`).update({ likes: likes + 1 }); // esto agrega el campo "likes" al documento dentro de firebase perteneciente a ese usuario con su id
  };

  //#############################################################

  const CartaUsuario = (props) => {
    return (
      <div className="carta-usuario">
        <h2>
          {props.autor}
          {props.uid === personaLogueada.uid && (
            <span className="delete" onClick={() => eliminarUsuario(props.id)}>
              {" "}
              {/* esto es para que solo la persona logueada pueda borrar su propio twwet sino no puede borrar y solo leer */}
              X
            </span>
          )}
        </h2>
        <p>{props.correo}</p>
        <h3>Tweets:</h3>
        <p>{props.tweet}</p>

        <span className="likes">
          <img
            src={corazon}
            className="corazon"
            alt="corazon"
            onClick={() => darLike(props.id, props.likes)} // se la agrega de forma anonima () => {} para poder parametrizar la funcion
          />
          <span>{props.likes ? props.likes : 0}</span>{" "}
          {/* si no tiene likes ese usuario en la base de datos entonces le asignamos como cero desde el front */}
        </span>
      </div>
    );
  };

  // ######## lista de usuarios dentro del estado global de usuarios totales #####

  const listaUsuarios = usuarios.map((usuario) => {
    return (
      <CartaUsuario
        key={usuario.id}
        id={usuario.id}
        uid={usuario.uid}
        autor={usuario.autor}
        tweet={usuario.tweet}
        correo={usuario.correo}
        likes={usuario.likes}
      />
    );
  });

  return (
    <div className="App">
      <h1>Prueba Firebase</h1>

      {/* Esta parte gestiona la autentificacion del usuario y que accion debe hacerse si log in o si log out */}
      {personaLogueada ? (
        <>
          <div className="user-profile">
            <img
              src={personaLogueada.photoURL}
              alt=""
              className="user-profile-pic"
            />
            <p>!Hola {personaLogueada.displayName}!</p>
            <button onClick={logout}>Log Out</button>
          </div>
        </>
      ) : (
        <>
          <button className="login-button" onClick={loginConGoogle}>
            Login con Google
          </button>
        </>
      )}

      {/* Recuerda SIEMPRE poner el onSubmit dentro de la etiqueta form de tu formulario y si quieres validar de forma avanzada un formulario usa la libreria FORMIK */}
      <form className="formulario" id="formulario" onSubmit={eviarUsuario}>
        <label htmlFor="tweet">Tweet:</label>
        <textarea
          name="tweet"
          id=""
          value={usuario.tweet}
          cols="30"
          rows="10"
          onChange={handleChange}
          placeholder="Escibe un tweet..."
          required
        ></textarea>

        <button type="submit">Enviar Usuario</button>
      </form>

      <h2>POSTS</h2>

      <div>{listaUsuarios}</div>
    </div>
  );
}
